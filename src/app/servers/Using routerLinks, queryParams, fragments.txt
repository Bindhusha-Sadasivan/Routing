Using routerLinks, queryParams, fragments:

First define a route.

  {
    path: 'servers/:id/edit',
    component: EditServerComponent
  }

If we define any route like this in any of our template, then it should load the EditServerComponent.

We can define the route like below,

      <a
        [routerLink]="['/servers', 5, 'edit']"
        [queryParams]="{allowEdit:true}"
        fragment="loading"
        class="list-group-item"
        *ngFor="let server of servers">
        {{ server.name }}
      </a>

 [routerLink]="['/servers', 5, 'edit']" => This routerLink parameter takes the below properties,

 '/servers' -> the absolute URL means http://localhost:4000/servers

 5 -> represents the id parameter, which we defined in thr route -> http://localhost:4000/servers/5

 'edit' -> represents a path after 5 ->  http://localhost:4000/servers/5/edit

 [queryParams]="{allowEdit:true}" => This represents the query parameters. It takes the javascript object. we can pass parameters through this query parameters to our template.

 It will be displayed after  a ? in the URL.

[queryParams]="{allowEdit:true}" => http://localhost:4000/servers/5/edit?allowEdit:true

fragment="loading" => This comes after # in the URL. It takes a string. => http://localhost:4000/servers/5/edit?allowEdit:true#loading


Use Programmatically: http://localhost:4000/servers/2/edit?allowEdit:true#loading

<div class="mt-3"><button (click)="loadServersById(2)" class="btn btn-primary">Load Servers By Id</button></div>


loadServersById(id:number){
    this.router.navigate(['/servers', id, 'edit'], {queryParams:{allowEdit:'true'}, fragment:'loading'});
  }

In the above method, we are passing,  route, queryParams and fragmets in a .ts file as js format.

In the above section, we passed into a html template.
